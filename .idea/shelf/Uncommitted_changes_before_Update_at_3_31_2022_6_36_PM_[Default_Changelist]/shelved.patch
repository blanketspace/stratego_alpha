Index: app/build/intermediates/incremental/packageDebug/tmp/debug/dex-renamer-state.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Wed Mar 30 19:52:13 PDT 2022\r\nbase.0=C\\:\\\\Users\\\\katyl\\\\AndroidStudioProjects\\\\stratego_alpha\\\\app\\\\build\\\\intermediates\\\\dex\\\\debug\\\\mergeDexDebug\\\\classes.dex\r\nrenamed.0=classes.dex\r\npath.0=classes.dex\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build/intermediates/incremental/packageDebug/tmp/debug/dex-renamer-state.txt b/app/build/intermediates/incremental/packageDebug/tmp/debug/dex-renamer-state.txt
--- a/app/build/intermediates/incremental/packageDebug/tmp/debug/dex-renamer-state.txt	(revision 50b36897393b93b3677964e5b1ff464b761fe14f)
+++ b/app/build/intermediates/incremental/packageDebug/tmp/debug/dex-renamer-state.txt	(date 1648701566961)
@@ -1,4 +1,4 @@
-#Wed Mar 30 19:52:13 PDT 2022
+#Wed Mar 30 21:39:26 PDT 2022
 base.0=C\:\\Users\\katyl\\AndroidStudioProjects\\stratego_alpha\\app\\build\\intermediates\\dex\\debug\\mergeDexDebug\\classes.dex
 renamed.0=classes.dex
 path.0=classes.dex
Index: app/src/main/java/edu/up/cs301/stratego/StrategoLocalGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.up.cs301.stratego;\r\n\r\nimport edu.up.cs301.game.GamePlayer;\r\nimport edu.up.cs301.game.LocalGame;\r\nimport edu.up.cs301.game.actionMsg.GameAction;\r\n\r\n/**\r\n * StrategoLocalGame\r\n *\r\n * @author Anne Marie Blank\r\n * @author Harry Vu\r\n * @author Vincent Truong\r\n * @author Kathryn Weidman\r\n *\r\n * @version 3/29/2022\r\n */\r\npublic class StrategoLocalGame extends LocalGame {\r\n\r\n    private StrategoGameState goldie;\r\n\r\n    public StrategoLocalGame() {\r\n        goldie = new StrategoGameState();\r\n    }//ctor\r\n\r\n    /**\r\n     * EXTERNAL CITATION\r\n     *\r\n     * lifted from PigLocalGame\r\n     * https://github.com/cs301up/PigGameStarter\r\n     *\r\n     * canMove\r\n     *\r\n     * can the player with the given id take an action right now?\r\n     */\r\n    @Override\r\n    protected boolean canMove(int playerIdx) {\r\n        if (playerIdx == goldie.getWhoseTurn()) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void sendUpdatedStateTo(GamePlayer p) {\r\n\r\n    }\r\n\r\n    @Override\r\n    protected String checkIfGameOver() {\r\n        if (goldie.isFlagCaptured()) {\r\n            return \"Flag Captured. Player Wins\";\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    protected boolean makeMove(GameAction action) {\r\n/**\r\n * movePiece\r\n *\r\n *\r\n * External Citation\r\n * Date 2/23/2022\r\n * Issue: unsure what methods to implement\r\n *\r\n * \"Link\": Office Hours help from Nux\r\n *\r\n *\r\n * @param playerID id of the player moving the piece\r\n * @param dir      direction of intended movement (up/down/l/r)\r\n *\r\n * @return  false if move is illegal, true otherwise\r\n */\r\n\r\n//TODO: up/down/l/r actions will be classes-- switch case will likely need to be modified to accomodate\r\n       /* public boolean movePiece(int playerID, Unit chosen, int dir) {\r\n            int chosenY = chosen.getyLoc();\r\n            int chosenX = chosen.getxLoc();\r\n\r\n            //1 = up, 2 = down, 3 = left, 4 = right\r\n            switch(dir) {\r\n                case 1:  //aka \"up\"\r\n                    if (gameboard[chosenX][chosenY - 1] == null && chosenY - 1 >= 0) {\r\n                        chosen.setyLoc(chosenY - 1);\r\n                        gameboard[chosenX][chosenY] = chosen;\r\n                        legal = true;\r\n                    }\r\n                    else if (gameboard[chosenX][chosenY - 1].getRank() == Unit.WATER) {\r\n                        legal = false;\r\n                    }\r\n                    else if (gameboard[chosenX][chosenY - 1].getRank() == Unit.FLAG) {\r\n                        legal = true;\r\n                    }\r\n                    else if (gameboard[chosenX][chosenY - 1].getRank() == Unit.BOMB) {\r\n                        legal = isMinerAttack(chosen.getRank());\r\n                    }\r\n                    else if (gameboard[chosenX][chosenY].getOwnerID() != playerID) {\r\n                        //attack\r\n                        int opponentRank = gameboard[chosenX][chosenY].getRank();\r\n                        if (opponentRank > chosen.getRank()) {\r\n                            chosen.setStatus(false);\r\n                            gameboard[chosenX][chosenY] = null;\r\n                            legal = true;\r\n                        }\r\n                        else {\r\n                            gameboard[chosenX][chosenY].setStatus(false);\r\n                            gameboard[chosenX][chosenY] = null;\r\n                            chosen.setxLoc(chosenY - 1);\r\n                            gameboard[chosenX][chosenY] = chosen;\r\n                            legal = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        legal = false;\r\n                    }\r\n                    break;\r\n                //End case 1\r\n\r\n                case 2:  //aka \"down\"\r\n                    if (gameboard[chosenX][chosenY + 1] == null && chosenY + 1 <= 9) {  //aka space is empty\r\n                        chosen.setyLoc(chosenY + 1);  //move into space\r\n                        gameboard[chosenX][chosenY] = chosen;\r\n                        legal = true;\r\n                    }\r\n                    else if (gameboard[chosenX][chosenY + 1].getRank() == Unit.WATER) {\r\n                        legal = false;  //can't walk on water\r\n                    }\r\n                    else if (gameboard[chosenX][chosenY + 1].getRank() == Unit.FLAG) {\r\n                        legal = true;\r\n                    }\r\n                    else if (gameboard[chosenX][chosenY + 1].getRank() == Unit.BOMB) {\r\n                        legal = isMinerAttack(chosen.getRank());\r\n                    }\r\n                    else if (gameboard[chosenX][chosenY + 1].getOwnerID() != playerID) {\r\n                        //attack\r\n                        int opponentRank = gameboard[chosenX][chosenY + 1].getRank();\r\n                        if (opponentRank > chosen.getRank()) {\r\n                            chosen.setStatus(false);  //you died\r\n                            gameboard[chosenX][chosenY] = null;  //empty space you were just in\r\n                            legal = true;\r\n                        }\r\n                        else {\r\n                            gameboard[chosenX][chosenY + 1].setStatus(false);  //they died\r\n                            gameboard[chosenX][chosenY] = null;  //empty the space you were just in\r\n                            chosen.setyLoc(chosenY + 1);  //move into opponent's space\r\n                            gameboard[chosenX][chosenY + 1] = chosen;  //report location to array\r\n                            legal = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        legal = false;\r\n                    }\r\n                    break;\r\n                //End case 2\r\n\r\n                case 3:  //aka \"left\"\r\n                    if (gameboard[chosenX - 1][chosenY] == null && chosenX - 1 >= 0) {\r\n                        chosen.setxLoc(chosenX - 1);\r\n                        gameboard[chosenX - 1][chosenY] = chosen;\r\n                        legal = true;\r\n                    }\r\n                    else if (gameboard[chosenX - 1][chosenY].getRank() == Unit.WATER) {\r\n                        legal = false;\r\n                    }\r\n                    else if (gameboard[chosenX - 1][chosenY].getRank() == Unit.FLAG) {\r\n                        legal = true;\r\n                    }\r\n                    else if (gameboard[chosenX - 1][chosenY].getRank() == Unit.BOMB) {\r\n                        legal = isMinerAttack(chosen.getRank());\r\n                    }\r\n                    else if (gameboard[chosenX - 1][chosenY].getOwnerID() != playerID) {\r\n                        //attack\r\n                        int opponentRank = gameboard[chosenX - 1][chosenY].getRank();\r\n\r\n                        if (opponentRank > chosen.getRank()) {\r\n                            chosen.setStatus(false);  //you died\r\n                            gameboard[chosenX][chosenY] = null;\r\n                            legal = true;\r\n                        }\r\n                        else {\r\n                            gameboard[chosenX - 1][chosenY].setStatus(false);  //they died\r\n                            gameboard[chosenX][chosenY] = null;  //empty your spot\r\n                            chosen.setxLoc(chosenX - 1);\r\n                            gameboard[chosenX - 1][chosenY] = chosen;  //take their spot\r\n                            legal = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        legal = false;\r\n                    }\r\n                    break;\r\n                //End case 3\r\n\r\n                case 4:  //aka \"right\"\r\n                    if (chosenX + 1 <= 9) {\r\n                        if (gameboard[chosenX + 1][chosenY] == null && chosenX + 1 <= 9) {\r\n                            chosen.setxLoc(chosenX + 1);\r\n                            gameboard[chosenX + 1][chosenY] = chosen;\r\n                            legal = true;\r\n                        }\r\n                        else if (gameboard[chosenX + 1][chosenY].getRank() == Unit.WATER) {\r\n                            legal = false;\r\n                        }\r\n                        else if (gameboard[chosenX + 1][chosenY].getRank() == Unit.FLAG) {\r\n                            legal = true;\r\n                        }\r\n                        else if (gameboard[chosenX + 1][chosenY].getRank() == Unit.BOMB) {\r\n                            legal = isMinerAttack(chosen.getRank());\r\n                        }\r\n                        else {\r\n                            if (gameboard[chosenX + 1][chosenY].getOwnerID() != playerID) {\r\n                                //attack\r\n                                int opponentRank = gameboard[chosenX + 1][chosenY].getRank();\r\n\r\n                                if (opponentRank > chosen.getRank()) {\r\n                                    chosen.setStatus(false);  //you died\r\n                                    gameboard[chosenX][chosenY] = null;\r\n                                    legal = true;\r\n                                }\r\n                                else if (opponentRank <= chosen.getRank()) {\r\n                                    gameboard[chosenX + 1][chosenY].setStatus(false);  //they died\r\n                                    gameboard[chosenX][chosenY] = null;  //empty your space\r\n                                    chosen.setxLoc(chosenX + 1);\r\n                                    gameboard[chosenX + 1][chosenY] = chosen;  //take theirs\r\n                                    legal = true;\r\n                                }\r\n                                else {\r\n                                    legal = false;\r\n                                }\r\n                            }\r\n                            else {\r\n                                legal = false;\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                    break;\r\n                //End of case 4\r\n\r\n                default:\r\n                    legal = false;\r\n                    break;\r\n                //End of default case\r\n            }//End switch-case*/\r\n\r\n            //if (goldie.getWhoseTurn() == 0) {\r\n                //goldie.setWhoseTurn(1);\r\n            //}\r\n            //else {\r\n                //goldie.setWhoseTurn(0);\r\n            //}\r\n\r\n            //return legal;\r\n       // }//movePiece\r\n        return false;\r\n    }//makeMove\r\n\r\n}//class StrategoLocalGame\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/up/cs301/stratego/StrategoLocalGame.java b/app/src/main/java/edu/up/cs301/stratego/StrategoLocalGame.java
--- a/app/src/main/java/edu/up/cs301/stratego/StrategoLocalGame.java	(revision 50b36897393b93b3677964e5b1ff464b761fe14f)
+++ b/app/src/main/java/edu/up/cs301/stratego/StrategoLocalGame.java	(date 1648699775452)
@@ -77,7 +77,7 @@
  * @return  false if move is illegal, true otherwise
  */
 
-//TODO: up/down/l/r actions will be classes-- switch case will likely need to be modified to accomodate
+//TODO: up/down/l/r actions will be classes-- switch case will likely need to be modified to accommodate
        /* public boolean movePiece(int playerID, Unit chosen, int dir) {
             int chosenY = chosen.getyLoc();
             int chosenX = chosen.getxLoc();
