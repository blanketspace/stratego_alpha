Index: app/src/main/java/edu/up/cs301/stratego/Unit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.up.cs301.stratego;\r\n\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Rect;\r\n\r\n/**\r\n * class Unit\r\n *\r\n * @author Anne Marie Blank,\r\n * @author Harry Vu,\r\n * @author Vincent Truong,\r\n * @author Kathryn Weidman\r\n * @version 4/7/2022\r\n */\r\npublic class Unit {\r\n    /**\r\n     *  External Citation\r\n     *  Date 2/23/2022\r\n     *  Issue: unsure what methods to implement\r\n     *  \"Link\": Office Hours help from Nux\r\n     *\r\n     */\r\n    public static final int SPY = 1;\r\n    public static final int SCOUT = 2;\r\n    public static final int MINER = 3;\r\n    public static final int SERGEANT = 4;\r\n    public static final int LIEUTENANT = 5;\r\n    public static final int CAPTAIN = 6;\r\n    public static final int MAJOR = 7;\r\n    public static final int COLONEL = 8;\r\n    public static final int GENERAL = 9;\r\n    public static final int MARSHAL = 10;\r\n    public static final int BOMB = 11;\r\n    public static final int FLAG = 12;\r\n    public static final int WATER = 13; //only completely non-movable piece\r\n\r\n\r\n    //for drawing Units\r\n    public static final int UNIT_WIDTH = 70;\r\n    public static final int UNIT_HEIGHT = 70;\r\n    private Paint redUnits = new Paint();\r\n    private Paint blueUnits = new Paint();\r\n    private Paint textPaint = new Paint();\r\n\r\n\r\n    /*** Nothing else needs to be added in this Unit class\r\n     * IMPORTANT ELABORATION: Every unit has their ownerID, meaning that\r\n     * the owner's id comes with the unit*/\r\n\r\n\r\n    private int ownerID;  //the id of the player who owns the piece\r\n    private int rank;     //what kind of unit is this?\r\n    private boolean isSelected;\r\n    private boolean isDead;\r\n    private int xLoc;\r\n    private int yLoc;\r\n\r\n\r\n    public Unit(int id, int initRank) {\r\n        ownerID = id;\r\n        rank = initRank;\r\n        isSelected = false;\r\n        isDead = false;\r\n        redUnits.setColor(0xfff24141);\r\n        blueUnits.setColor(0xff4287f5);\r\n        textPaint.setColor(Color.BLACK);\r\n\r\n    }//ctor\r\n\r\n    public int getOwnerID(){\r\n        return this.ownerID;\r\n    }\r\n\r\n    public int getRank() {\r\n        return rank;\r\n    }\r\n\r\n    public void setSelected(boolean selected) {\r\n        if (!isDead) {\r\n            isSelected = selected;\r\n            //this.drawHighlight();\r\n        }\r\n    }\r\n\r\n    public boolean getSelected(){\r\n        return this.isSelected;\r\n    }\r\n\r\n    public void setDead(boolean dead){\r\n        this.isDead = dead;\r\n    }\r\n\r\n    /**\r\n     * getStatus\r\n     *\r\n     * this is confusing, so\r\n     *\r\n     * @return  true if dead, false if alive\r\n     */\r\n    public boolean getStatus(){\r\n        return this.isDead;\r\n    }\r\n\r\n    public int getxLoc() {\r\n        return this.xLoc;\r\n    }\r\n\r\n    public int getyLoc() {\r\n        return this.yLoc;\r\n    }\r\n\r\n    public void setxLoc(int xLoc) {\r\n        this.xLoc = xLoc;\r\n    }\r\n\r\n    public void setyLoc(int yLoc) {\r\n        this.yLoc = yLoc;\r\n    }\r\n\r\n    public String nameRank() {\r\n        String name;\r\n        switch (this.rank)\r\n        {\r\n            case 1:\r\n                return \"Spy\";\r\n            case 2:\r\n                return \"Scout\";\r\n            case 3:\r\n                return \"Miner\";\r\n            case 4:\r\n                return \"Sergeant\";\r\n            case 5:\r\n                return \"Lieutenant\";\r\n            case 6:\r\n                return \"Captain\";\r\n            case 7:\r\n                return \"Major\";\r\n            case 8:\r\n                return \"Colonel\";\r\n            case 9:\r\n                return \"General\";\r\n            case 10:\r\n                return \"Marshal\";\r\n            case 11:\r\n                return \"Bomb\";\r\n            case 12:\r\n                return \"Flag\";\r\n        }\r\n        return \"bad\";\r\n    }//nameRank\r\n\r\n    /**\r\n     * drawMe\r\n     *\r\n     * @param c  the canvas to draw on\r\n     */\r\n    public void drawMe(Canvas c) {\r\n        //the following lines are for drawing the outline of the unit\r\n        Paint outline = new Paint();\r\n\r\n        if(this.isSelected){\r\n            outline.setColor(0xFFfcfc03);  //highlight color\r\n            outline.setStyle(Paint.Style.STROKE);\r\n        }\r\n        else{\r\n            outline.setColor(0xFF000000); //regular black\r\n            outline.setStyle(Paint.Style.STROKE);\r\n        }\r\n\r\n        if(!this.isDead){\r\n            if (ownerID == 0) {\r\n                c.drawRect(xLoc*UNIT_WIDTH, yLoc*UNIT_HEIGHT, xLoc*UNIT_WIDTH + UNIT_WIDTH, yLoc*UNIT_HEIGHT + UNIT_HEIGHT, redUnits);\r\n                c.drawRect(xLoc*UNIT_WIDTH, yLoc*UNIT_HEIGHT, xLoc*UNIT_WIDTH + UNIT_WIDTH, yLoc*UNIT_HEIGHT + UNIT_HEIGHT, outline);\r\n            }\r\n            else if (ownerID == 1) {\r\n                c.drawRect(xLoc*UNIT_WIDTH, yLoc*UNIT_HEIGHT, xLoc*UNIT_WIDTH + UNIT_WIDTH, yLoc*UNIT_HEIGHT + UNIT_HEIGHT, blueUnits);\r\n                c.drawRect(xLoc*UNIT_WIDTH, yLoc*UNIT_HEIGHT, xLoc*UNIT_WIDTH + UNIT_WIDTH, yLoc*UNIT_HEIGHT + UNIT_HEIGHT, outline);\r\n            }\r\n\r\n            /**\r\n             * external citation\r\n             * 4/19/2022\r\n             * in-class help from nux\r\n             */\r\n            if(this.rank == 11) {\r\n                c.drawText(\"Bomb\", xLoc * UNIT_WIDTH + UNIT_WIDTH / 3, yLoc * UNIT_HEIGHT + UNIT_HEIGHT / 3, textPaint);\r\n            }\r\n            else if(this.rank == 12)\r\n            {\r\n                c.drawText(\"Flag\", xLoc * UNIT_WIDTH + UNIT_WIDTH / 3, yLoc * UNIT_HEIGHT + UNIT_HEIGHT / 3, textPaint);\r\n            }\r\n            else\r\n            {\r\n                c.drawText(\"\"+this.rank, xLoc * UNIT_WIDTH + UNIT_WIDTH / 3, yLoc * UNIT_HEIGHT + UNIT_HEIGHT / 3, textPaint);\r\n            }\r\n        }\r\n\r\n\r\n    }//drawMe\r\n\r\n\r\n    /**\r\n     * External Citation\r\n     * based off of a method of the same name in the CustomRect class\r\n     * provided as a resource for the Custom Coloring homework\r\n     *\r\n     * @param x\r\n     * @param y\r\n     * @return\r\n     */\r\n    public boolean containsPoint(int x, int y) {\r\n        Rect r = new Rect(xLoc*UNIT_WIDTH, yLoc*UNIT_HEIGHT, xLoc*UNIT_WIDTH + UNIT_WIDTH, yLoc*UNIT_HEIGHT + UNIT_HEIGHT);\r\n\r\n        return r.contains(x, y);\r\n    }//containsPoint\r\n\r\n}//class Unit\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/up/cs301/stratego/Unit.java b/app/src/main/java/edu/up/cs301/stratego/Unit.java
--- a/app/src/main/java/edu/up/cs301/stratego/Unit.java	
+++ b/app/src/main/java/edu/up/cs301/stratego/Unit.java	
@@ -103,6 +103,8 @@
         return this.isDead;
     }
 
+
+
     public int getxLoc() {
         return this.xLoc;
     }
Index: app/src/main/res/layout/stratego_board.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/Main\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\"edu.up.cs301.pig.PigMainActivity\">\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/LeftBar\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"match_parent\"\r\n        android:orientation=\"vertical\">\r\n\r\n        <Button\r\n            android:id=\"@+id/menuButton\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"50dp\"\r\n            android:text=\"Menu\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/SurrenderButton\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Surrender\"\r\n            android:textSize=\"10dp\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/ExitButton\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Exit\" />\r\n\r\n    </LinearLayout>\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/MidContent\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\">\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/TopBar\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:gravity=\"top\"\r\n            android:orientation=\"horizontal\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/NumTroopYours\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"1\"\r\n                android:text=\"Your Troops: \"\r\n                android:textSize=\"25dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/Numberyourtroops\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"30\"\r\n                android:textSize=\"25dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/RankSelectedTroop\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginLeft=\"5dp\"\r\n                android:layout_weight=\"1\"\r\n                android:text=\"|| Rank of troop: \"\r\n                android:textSize=\"25dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/DisplayRank\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"1\"\r\n                android:text=\"Miner\"\r\n                android:textSize=\"25dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/Time\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginLeft=\"5dp\"\r\n                android:layout_weight=\"1\"\r\n                android:text=\"|| 06:30\"\r\n                android:textSize=\"25dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/TurnText\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginLeft=\"5dp\"\r\n                android:layout_weight=\"1\"\r\n                android:text=\"|| Turn: \"\r\n                android:textSize=\"25dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/TurnNum\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"1\"\r\n                android:text=\"30\"\r\n                android:textSize=\"25dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/numTroopEnemy\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginLeft=\"5dp\"\r\n                android:layout_weight=\"1\"\r\n                android:text=\"|| Enemy Troops: \"\r\n                android:textSize=\"25dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/NumberEnemyTroops\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"1\"\r\n                android:text=\"30\"\r\n                android:textSize=\"25dp\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <RelativeLayout\r\n            android:id=\"@+id/RelativeLay_board\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_marginTop=\"5dp\"\r\n            android:layout_marginBottom=\"5dp\"\r\n            android:gravity=\"center\">\r\n\r\n\r\n            <ImageView\r\n                android:id=\"@+id/BoardIBackGround\"\r\n                android:layout_width=\"625dp\"\r\n                android:layout_height=\"625dp\"\r\n                android:background=\"@drawable/good_board\" />\r\n            --!this ImageView is currently used in Pig files to setTopView!--\r\n\r\n            <edu.up.cs301.stratego.BoardView\r\n                android:id=\"@+id/strat_boardView\"\r\n                android:layout_width=\"625dp\"\r\n                android:layout_height=\"625dp\"\r\n                android:background=\"@drawable/good_board\" />\r\n\r\n\r\n\r\n        </RelativeLayout>\r\n\r\n    </LinearLayout>\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/RightContent\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_weight=\"1\"\r\n        android:orientation=\"vertical\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/strategoLabel\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n\r\n            android:text=\"Stratego\"\r\n            android:textSize=\"30sp\" />\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/yourGraveyard\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"240dp\"\r\n            android:layout_weight=\"1\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/GraveYoursText\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:gravity=\"center\"\r\n                android:text=\"Your Graveyard\"\r\n                android:textSize=\"25dp\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/enemyGraveyard\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"240dp\"\r\n            android:layout_weight=\"0\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/graveEnemyText\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"0\"\r\n                android:gravity=\"center\"\r\n                android:text=\"Enemy Graveyard\"\r\n                android:textSize=\"25dp\" />\r\n\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/controlSection\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\".5\"\r\n            android:layout_gravity=\"center_vertical\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/topLayerControl\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"horizontal\">\r\n\r\n                <Button\r\n                    android:id=\"@+id/endButton\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"END\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/upButton\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginLeft=\"50dp\"\r\n                    android:layout_weight=\"0\"\r\n                    android:text=\"UP\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/middleLayerControl\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"0\"\r\n                android:orientation=\"horizontal\">\r\n\r\n                <Button\r\n                    android:id=\"@+id/leftButton\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"left\"\r\n                    android:layout_marginLeft=\"20dp\"\r\n                    android:text=\"LEFT\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/rightButton\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginLeft=\"160dp\"\r\n                    android:text=\"RIGHT\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/bottomLayerControl\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"horizontal\">\r\n\r\n                <Button\r\n                    android:id=\"@+id/helpButton\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_weight=\"0\"\r\n                    android:text=\"HELP\" />\r\n\r\n                <Button\r\n                    android:id=\"@+id/downButton\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginLeft=\"50dp\"\r\n                    android:text=\"DOWN\" />\r\n            </LinearLayout>\r\n\r\n        </LinearLayout>\r\n\r\n    </LinearLayout>\r\n\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/stratego_board.xml b/app/src/main/res/layout/stratego_board.xml
--- a/app/src/main/res/layout/stratego_board.xml	
+++ b/app/src/main/res/layout/stratego_board.xml	
@@ -5,7 +5,7 @@
     android:id="@+id/Main"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context="edu.up.cs301.pig.PigMainActivity">
+    tools:context="edu.up.cs301.stratego.StrategoMainActivity">
 
     <LinearLayout
         android:id="@+id/LeftBar"
Index: app/src/main/java/edu/up/cs301/stratego/StrategoGameState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.up.cs301.stratego;\r\n\r\n\r\nimport java.util.ArrayList;\r\nimport edu.up.cs301.game.infoMsg.GameState;\r\n\r\n/**\r\n * StrategoGameState\r\n *\r\n * class to store and describe the current state of the game\r\n *\r\n * @author Anne Marie Blank,\r\n * @author Harry Vu,\r\n * @author Vincent Truong,\r\n * @author Kathryn Weidman\r\n * @version 4/13/2022\r\n */\r\npublic class StrategoGameState extends GameState {\r\n\r\n    protected StrategoGameState state;\r\n\r\n    private int whoseTurn;\r\n\r\n    private Unit[][] gameboard;\r\n    private int roundNumber;     //will be initialized to zero, changed to indicate who's turn it is\r\n    private double timeElapsed;  //for the timer\r\n\r\n    private ArrayList<Unit> p1Troops;\r\n    private ArrayList<Unit> p2Troops;\r\n\r\n    private boolean flagCaptured;\r\n\r\n\r\n    /**\r\n     * ctor\r\n     *\r\n     * defines the state of the game on startup\r\n     */\r\n    public StrategoGameState() {\r\n        gameboard = new Unit[10][10];\r\n        roundNumber = 0;\r\n        whoseTurn = 0;\r\n        timeElapsed = 0.0;\r\n        flagCaptured = false;\r\n        p1Troops = new ArrayList<Unit>();\r\n        p2Troops = new ArrayList<Unit>();\r\n\r\n        this.fillRanks(0);\r\n        this.fillRanks(1);\r\n\r\n        //loop through each \"hand\", fill gameboard array\r\n\r\n        //p1 aka the \"top\" half of board\r\n        for (int i = 0; i < 4; i++) {\r\n            for (int j = 0; j < gameboard.length; j++) {\r\n                gameboard[i][j] = p1Troops.get(10*i + j); //10*i + j necessary to keep p1Troops on track\r\n                Unit test = gameboard[i][j];\r\n                // set x and y\r\n                test.setxLoc(j);  //changed from j*Unit_Width\r\n                test.setyLoc(i);\r\n            }\r\n        }\r\n        //p2 aka \"bottom\" half of board\r\n        int k = 0; //for math purposes-- so we can keep formulas from prev loop\r\n        for (int i = 6; i < 10; i++) {\r\n            for (int j = 0; j < gameboard.length; j++) {\r\n                gameboard[i][j] = p2Troops.get(10*k + j); //10*k + j keeps us moving through arraylist\r\n                Unit test = gameboard[i][j];\r\n                // set x and y\r\n                test.setxLoc(j);\r\n                test.setyLoc(i);\r\n            }\r\n            k++;\r\n        }\r\n\r\n    }//ctor\r\n\r\n\r\n    /**\r\n     * fillRanks\r\n     *\r\n     * helper method to fill the player's Troop Arrays\r\n     *\r\n     * @param pID   the id of the player whose array needs filling\r\n     */\r\n    public void fillRanks(int pID) {\r\n        if (pID == 0) {\r\n            p1Troops.add(new Unit(0, Unit.MARSHAL));\r\n            p1Troops.add(new Unit(0, Unit.GENERAL));\r\n            p1Troops.add(new Unit(0, Unit.FLAG));\r\n            p1Troops.add(new Unit(0, Unit.SPY));\r\n\r\n            p1Troops.add(new Unit(0, Unit.COLONEL));\r\n            p1Troops.add(new Unit(0, Unit.COLONEL));\r\n\r\n            p1Troops.add(new Unit(0, Unit.MAJOR));\r\n            p1Troops.add(new Unit(0, Unit.MAJOR));\r\n            p1Troops.add(new Unit(0, Unit.MAJOR));\r\n\r\n            for (int i = 0; i < 4; i++) {\r\n                p1Troops.add(new Unit(0, Unit.SERGEANT));\r\n            }\r\n\r\n            for (int i = 0; i < 4; i++) {\r\n                p1Troops.add(new Unit(0, Unit.LIEUTENANT));\r\n            }\r\n\r\n            for (int i = 0; i < 4; i++) {\r\n                p1Troops.add(new Unit(0, Unit.CAPTAIN));\r\n            }\r\n\r\n            for (int i = 0; i < 5; i++) {\r\n                p1Troops.add(new Unit(0, Unit.MINER));\r\n            }\r\n\r\n            for (int i = 0; i < 8; i++) {\r\n                p1Troops.add(new Unit(0, Unit.SCOUT));\r\n            }\r\n\r\n            for (int i = 0; i < 6; i++) {\r\n                p1Troops.add(new Unit(0, Unit.BOMB));\r\n            }\r\n\r\n        }\r\n        else if (pID == 1) {\r\n            p2Troops.add(new Unit(1, Unit.MARSHAL));\r\n            p2Troops.add(new Unit(1, Unit.GENERAL));\r\n            p2Troops.add(new Unit(1, Unit.FLAG));\r\n            p2Troops.add(new Unit(1, Unit.SPY));\r\n\r\n            p2Troops.add(new Unit(1, Unit.COLONEL));\r\n            p2Troops.add(new Unit(1, Unit.COLONEL));\r\n\r\n            p2Troops.add(new Unit(1, Unit.MAJOR));\r\n            p2Troops.add(new Unit(1, Unit.MAJOR));\r\n            p2Troops.add(new Unit(1, Unit.MAJOR));\r\n\r\n            p2Troops.add(new Unit(1, Unit.SERGEANT));\r\n            p2Troops.add(new Unit(1, Unit.SERGEANT));\r\n            p2Troops.add(new Unit(1, Unit.SERGEANT));\r\n            p2Troops.add(new Unit(1, Unit.SERGEANT));\r\n\r\n            p2Troops.add(new Unit(1, Unit.LIEUTENANT));\r\n            p2Troops.add(new Unit(1, Unit.LIEUTENANT));\r\n            p2Troops.add(new Unit(1, Unit.LIEUTENANT));\r\n            p2Troops.add(new Unit(1, Unit.LIEUTENANT));\r\n\r\n            p2Troops.add(new Unit(1, Unit.CAPTAIN));\r\n            p2Troops.add(new Unit(1, Unit.CAPTAIN));\r\n            p2Troops.add(new Unit(1, Unit.CAPTAIN));\r\n            p2Troops.add(new Unit(1, Unit.CAPTAIN));\r\n\r\n            for (int i = 0; i < 5; i++) {\r\n                p2Troops.add(new Unit(1, Unit.MINER));\r\n            }\r\n\r\n            for (int i = 0; i < 8; i++) {\r\n                p2Troops.add(new Unit(1, Unit.SCOUT));\r\n            }\r\n\r\n            for (int i = 0; i < 6; i++) {\r\n                p2Troops.add(new Unit(1, Unit.BOMB));\r\n            }\r\n        }\r\n    }//fillRanks\r\n\r\n\r\n    /**\r\n     * copy ctor\r\n     *\r\n     * @param orig  the original GameState to be copied\r\n     * @Override\r\n     */\r\n    public StrategoGameState(StrategoGameState orig){\r\n        this.gameboard = new Unit[10][10];\r\n\r\n        //initialize new gameboard to be just like the old one\r\n        for (int i = 0; i < gameboard.length; i++) {\r\n            for (int j = 0; j < gameboard[i].length; j++) {\r\n                gameboard[i][j] = orig.gameboard[i][j];\r\n            }\r\n        }\r\n        flagCaptured = orig.flagCaptured;\r\n        whoseTurn = orig.whoseTurn;\r\n        roundNumber = orig.roundNumber;\r\n        p1Troops = new ArrayList<>();\r\n        p2Troops = new ArrayList<>();\r\n\r\n        //makes a deep copy of the the troops arraylist\r\n        for (int i = 0; i < orig.p1Troops.size(); i++) {\r\n            this.p1Troops.add(orig.p1Troops.get(i));\r\n        }\r\n        for (int i = 0; i < orig.p2Troops.size(); i++) {\r\n            this.p2Troops.add(orig.p2Troops.get(i));\r\n        }\r\n\r\n    }//copy ctor\r\n\r\n\r\n    /**\r\n     * toString\r\n     *\r\n     * @return a String representation of the current StrategoGameState\r\n     */\r\n    @Override\r\n    public String toString() {\r\n        String foo = null;\r\n        for (int i = 0; i < p1Troops.size(); i++) {\r\n            foo = \"\" + p1Troops.get(i).nameRank() + \" \";\r\n        }\r\n        String bar = null;\r\n        for (int i = 0; i < p2Troops.size(); i++) {\r\n            bar = \"\" + p2Troops.get(i).nameRank() + \" \";\r\n        }\r\n        return \"Turn:\" + whoseTurn + \"Player 1 Troops: \" + foo\r\n                + \"Player 2 Troops: \" + bar + \"Time Elapsed: \" + timeElapsed\r\n                + \"Flag Captured?: \" + flagCaptured;\r\n    }//toString\r\n\r\n\r\n    /**\r\n     * findEquivUnit\r\n     *\r\n     * Given a Unit from another game state, find the one in this game state\r\n     * that is the same (if it exists)\r\n     *\r\n     * @param other   the Unit we're attempting to find a match for\r\n     * @return        the Unit that matches the one passed in\r\n     */\r\n    public Unit findEquivUnit(Unit other) {\r\n        ArrayList<Unit> searchMe = this.p1Troops;\r\n\r\n        if(other != null){\r\n            if (other.getOwnerID() == 1) {\r\n                searchMe = this.p2Troops;\r\n            }\r\n            for(Unit u : searchMe) {\r\n                if ((u.getxLoc() == other.getxLoc()) && (u.getyLoc() == other.getyLoc())) {\r\n                    return u;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return null;\r\n    }//findEquivUnit\r\n\r\n\r\n    /**\r\n     * selectPiece\r\n     *\r\n     *\r\n     * @param playerID   the id of the player attempting to choose\r\n     * @param chosenP    the Unit being selected\r\n     */\r\n    public boolean selectPiece(int playerID, Unit chosenP) {\r\n        if (chosenP.getOwnerID() == playerID) {\r\n            clearSelection(playerID);  //sets all Units to false\r\n            chosenP.setSelected(true); //sets selection to true\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }//selectPiece\r\n\r\n\r\n    /**\r\n     * clearSelection\r\n     *\r\n     * sets the isSelected value of all Units in the player's \"hand\" to false\r\n     *\r\n     * @param playerId  the ID of the user attempting to make a selection\r\n     */\r\n    public void clearSelection(int playerId) {\r\n        switch (playerId) {\r\n            case 0:\r\n                for (int i= 0; i < p1Troops.size(); i++) {\r\n                    p1Troops.get(i).setSelected(false);\r\n                }\r\n                break;\r\n            case 1:\r\n                for (int i= 0; i < p2Troops.size(); i++) {\r\n                    p2Troops.get(i).setSelected(false);\r\n                }\r\n                break;\r\n        }\r\n    }//clearSelection\r\n\r\n\r\n    /**\r\n     * getSelectedUnit\r\n     *\r\n     * finds the Unit in the gameboard array that is selected\r\n     *\r\n     * @return   returns the Unit on the gameboard that is currently selected\r\n     */\r\n    public Unit getSelectedUnit(){\r\n        Unit selected = null;\r\n        for(int i = 0; i < this.gameboard.length; i++){\r\n            for(int j = 0; j < this.gameboard.length; j++){\r\n                if(gameboard[i][j] != null && gameboard[i][j].getSelected()){\r\n                    //the above condition is met when the Unit at that loc /is/ selected\r\n                    selected = gameboard[i][j];\r\n                }\r\n            }\r\n        }\r\n        return selected;  //CAUTION: could return false; this is handled in SLocalGame\r\n    }//getSelectedUnit\r\n\r\n\r\n    /**\r\n     * placePiece\r\n     *\r\n     * meant for the beginning stage of the game, when players\r\n     * move their pieces from the starting location (graveyard) and onto the board\r\n     *\r\n     * @param playerID  the id of the player making the move\r\n     * @param unit      the unit they're moving\r\n     * @param x         x coord of new location\r\n     * @param y         y coord of new location\r\n     * @return          true if alive and movement is valid, false if not\r\n     */\r\n    public boolean placePiece(int playerID, Unit unit, int x, int y) {\r\n        if (unit.getStatus()) {\r\n            if (playerID == 0 && y < 4) {  //< 4 is for boundary purposes, ensures piece is on your side\r\n                unit.setxLoc(x);\r\n                unit.setxLoc(y);\r\n                gameboard[x][y] = unit;\r\n                return true;\r\n            }\r\n            else if (playerID == 1 && y > 5) {\r\n                unit.setxLoc(x);\r\n                unit.setxLoc(y);\r\n                gameboard[x][y] = unit;\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }//placePiece\r\n\r\n\r\n    /**\r\n     * getUnit\r\n     *\r\n     * @param id    the id of the player whose \"hand\" you want to access\r\n     * @param index the index you want to access\r\n     * @return      the unit at the given index in the player's \"hand\"\r\n     */\r\n    public Unit getUnit(int id, int index) {\r\n        if (id == 0) {\r\n            return p1Troops.get(index);\r\n        }\r\n        else {\r\n            return p2Troops.get(index);\r\n        }\r\n    }//getUnit\r\n\r\n\r\n    /**\r\n     * isMinerAttack\r\n     *\r\n     * helper method to check for miner vs. bomb interactions\r\n     *\r\n     * @param chosenRank  the rank of the unit being checked\r\n     * @return            true if the unit is a miner, false if else\r\n     */\r\n    public boolean isMinerAttack(int chosenRank) {\r\n        if (chosenRank == Unit.MINER){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }//isMinerAttack\r\n\r\n\r\n    /** settters and getters */\r\n\r\n    public void setWhoseTurn(int whoseTurn) {\r\n        this.whoseTurn = whoseTurn;\r\n    }\r\n\r\n    public int getWhoseTurn() {\r\n        return whoseTurn;\r\n    }\r\n\r\n    public Unit[][] getGameboard() {\r\n        return gameboard;\r\n    }\r\n\r\n    public ArrayList<Unit> getP1Troops() {\r\n        return p1Troops;\r\n    }\r\n\r\n    public ArrayList<Unit> getP2Troops() {\r\n        return p2Troops;\r\n    }\r\n\r\n    public boolean isFlagCaptured() {\r\n        return flagCaptured;\r\n    }\r\n\r\n    public void setFlagCaptured(boolean flagCaptured) {\r\n        this.flagCaptured = flagCaptured;\r\n    }\r\n}//StrategoGameState\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/up/cs301/stratego/StrategoGameState.java b/app/src/main/java/edu/up/cs301/stratego/StrategoGameState.java
--- a/app/src/main/java/edu/up/cs301/stratego/StrategoGameState.java	
+++ b/app/src/main/java/edu/up/cs301/stratego/StrategoGameState.java	
@@ -22,7 +22,7 @@
     private int whoseTurn;
 
     private Unit[][] gameboard;
-    private int roundNumber;     //will be initialized to zero, changed to indicate who's turn it is
+    //private int roundNumber;     //will be initialized to zero, changed to indicate who's turn it is
     private double timeElapsed;  //for the timer
 
     private ArrayList<Unit> p1Troops;
@@ -38,15 +38,15 @@
      */
     public StrategoGameState() {
         gameboard = new Unit[10][10];
-        roundNumber = 0;
+        //roundNumber = 0;
         whoseTurn = 0;
         timeElapsed = 0.0;
         flagCaptured = false;
         p1Troops = new ArrayList<Unit>();
         p2Troops = new ArrayList<Unit>();
 
-        this.fillRanks(0);
         this.fillRanks(1);
+        this.fillRanks(0);
 
         //loop through each "hand", fill gameboard array
 
@@ -182,7 +182,7 @@
         }
         flagCaptured = orig.flagCaptured;
         whoseTurn = orig.whoseTurn;
-        roundNumber = orig.roundNumber;
+        //roundNumber = orig.roundNumber;
         p1Troops = new ArrayList<>();
         p2Troops = new ArrayList<>();
 
Index: app/src/main/java/edu/up/cs301/stratego/StrategoDumbCompPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.up.cs301.stratego;\r\n\r\n\r\nimport android.util.Log;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\nimport edu.up.cs301.game.GameComputerPlayer;\r\nimport edu.up.cs301.game.infoMsg.GameInfo;\r\nimport edu.up.cs301.stratego.actions.DownAction;\r\nimport edu.up.cs301.stratego.actions.LeftAction;\r\nimport edu.up.cs301.stratego.actions.MovePieceAction;\r\nimport edu.up.cs301.stratego.actions.RightAction;\r\nimport edu.up.cs301.stratego.actions.SelectPieceAction;\r\nimport edu.up.cs301.stratego.actions.UpAction;\r\n\r\n/**\r\n * StrategoDumbCompPlayer\r\n *\r\n * @author Anne Marie Blank\r\n * @author Harry Vu,\r\n * @author Vincent Truong,\r\n * @author Kathryn Weidman\r\n * @version 4/13/2022\r\n */\r\npublic class StrategoDumbCompPlayer extends GameComputerPlayer {\r\n\r\n    private StrategoGameState copyGS;\r\n\r\n    /**\r\n     * constructor\r\n     *\r\n     * @param name the player's name (e.g., \"John\")\r\n     */\r\n    public StrategoDumbCompPlayer(String name) {\r\n        super(name);\r\n        this.playerNum = 1;\r\n    }\r\n\r\n    @Override\r\n    protected void receiveInfo(GameInfo info) {\r\n        if(info instanceof StrategoGameState){\r\n            copyGS = (StrategoGameState) info;\r\n            Log.i(\"DUMB_COMP\",\"RECEIVED_NEW_INFO_alknrg;ladn\");\r\n\r\n            if(copyGS.getWhoseTurn() == this.playerNum){\r\n                //if we've made it here, then it *is* this player's turn, so we can choose moves\r\n                Random randGen = new Random();\r\n                int randomDir = randGen.nextInt(4);\r\n\r\n                Unit[][] board = copyGS.getGameboard();\r\n                int randomX = randGen.nextInt(39);\r\n                // int randomY = randGen.nextInt(9);\r\n                Unit selected = copyGS.getUnit(0, randomX);\r\n\r\n                //Unit selected = board[]\r\n                //TODO: IDEA! use p2troops: only one random and eliminates the \"computer picks the water\" issue\r\n                sleep(2000);\r\n\r\n                if (selected != null){\r\n                    SelectPieceAction spa = new SelectPieceAction(this, board[selected.getyLoc()][selected.getxLoc()]);\r\n                    game.sendAction(spa);\r\n                    Log.i(\"COMP_SELECTED_Piece\", \"asjgarjigoaet;hdjlksgjdfg\");\r\n                }\r\n                //send move actions based on random number chosen\r\n                if(randomDir == 0){ //moving up\r\n                    UpAction upAction = new UpAction(this);\r\n                    game.sendAction(upAction);\r\n                    Log.i(\"COMP_MOVED_UP\", \"aj;lkdjgldjgisldfjgk\");\r\n                }\r\n                else if(randomDir == 1){ //moving down\r\n                    DownAction downAction = new DownAction(this);\r\n                    game.sendAction(downAction);\r\n                    Log.i(\"COMP_MOVED_DOWN\", \"ijoajglksjdlkfgjs\");\r\n                }\r\n                else if(randomDir == 2){ //moving left\r\n                    LeftAction leftAction = new LeftAction(this);\r\n                    game.sendAction(leftAction);\r\n                    Log.i(\"COMP_MOVED_LEFT\", \"jkgdlkjgalkjlgkjsd\");\r\n                }\r\n                else if(randomDir == 3){ //moving right\r\n                    RightAction rightAction = new RightAction(this);\r\n                    game.sendAction(rightAction);\r\n                    Log.i(\"COMP_MOVED_RIGHT\", \"ldjglajdfldkhshd'fj\");\r\n                }\r\n            }\r\n\r\n        }\r\n        else {\r\n            //something has gone wrong, it's likely not the player's turn\r\n            //here, the human player has the screen flash, but a computer doesn't\r\n            //need that visual cue, so we're leaving this empty\r\n        }\r\n\r\n    }//receiveInfo\r\n\r\n    public void setUpDumbPieces(StrategoGameState gameState) { //Untested 4/7/22, Unsure of proper location\r\n        ArrayList<Unit> p1Troops = gameState.getP1Troops();\r\n        int i = 0, j = 6;\r\n        for(Unit troop: p1Troops) { //Coordinates for placePiece are formula from StrategoGameState\r\n            gameState.placePiece(playerNum, troop, i * troop.UNIT_WIDTH, j * troop.UNIT_HEIGHT);\r\n            troop.setStatus(true);\r\n            switch(i) {\r\n                case 9: //If we've reached the end of the row, start over a column down\r\n                    i = 0;\r\n                    j++;\r\n\r\n                    break;\r\n                default:\r\n                    i++;\r\n                    break;\r\n            } //Possible bug: troop arraylist being too short/long causing errors in placement;\r\n        }\r\n    }\r\n}//StrategoDumbCompPlayer\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/up/cs301/stratego/StrategoDumbCompPlayer.java b/app/src/main/java/edu/up/cs301/stratego/StrategoDumbCompPlayer.java
--- a/app/src/main/java/edu/up/cs301/stratego/StrategoDumbCompPlayer.java	
+++ b/app/src/main/java/edu/up/cs301/stratego/StrategoDumbCompPlayer.java	
@@ -100,7 +100,7 @@
         int i = 0, j = 6;
         for(Unit troop: p1Troops) { //Coordinates for placePiece are formula from StrategoGameState
             gameState.placePiece(playerNum, troop, i * troop.UNIT_WIDTH, j * troop.UNIT_HEIGHT);
-            troop.setStatus(true);
+            troop.setDead(true);
             switch(i) {
                 case 9: //If we've reached the end of the row, start over a column down
                     i = 0;
